version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: enzi-postgres
    environment:
      POSTGRES_DB: enzi_coffee_shop
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: kariakoo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - enzi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: enzi-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:kariakoo@postgres:5432/enzi_coffee_shop
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      PORT: 3001
      CORS_ORIGIN: http://localhost:3000,http://frontend:3000
      LOG_LEVEL: info
      LOG_FORMAT: json
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - enzi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: enzi-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_APP_NAME: Enzi Coffee Shop
      NEXT_PUBLIC_APP_VERSION: 1.0.0
      NEXT_PUBLIC_TOKEN_KEY: enzi_auth_token
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - enzi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: enzi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - enzi-network
    restart: unless-stopped
    profiles:
      - production

  # Redis for caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: enzi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - enzi-network
    restart: unless-stopped
    profiles:
      - production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  enzi-network:
    driver: bridge 